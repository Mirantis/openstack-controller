#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set service = 'neutron' %}
{%- set messaging = spec.get('features', {}).get('messaging', {}) %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}

spec:
  releases:
{%- if messaging.get('dedicated_rabbitmq', {}).get('enabled', True) %}
  - name: openstack-neutron-rabbitmq
    chart: {{spec.common.infra.repo}}/rabbitmq
    values:
{% include 'base/_rabbitmq_images.yaml' %}
  {%- if stacklight_enabled %}
      monitoring:
        prometheus:
          enabled: true
  {%- endif %}
      pod:
        replicas:
          server: 1
      manifests:
        network_policy: false
        job_users_create: true
      volume:
        enabled: false
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
        oslo_messaging: &neutron_endpoints_oslo_messaging
          auth:
            admin:
              username: {{ admin_creds.messaging.username }}
              password: {{ admin_creds.messaging.password }}
            neutron:
              username: {{ credentials.messaging.user.username }}
              password: {{ credentials.messaging.user.password }}
          statefulset:
            replicas: 1
            name: openstack-neutron-rabbitmq-rabbitmq
          hosts:
            default: rabbitmq-neutron
          path: /neutron
        prometheus_rabbitmq_exporter:
          hosts:
            default: rabbitmq-exporter-neutron
      conf:
        users:
          neutron:
            auth:
              service_user:
                username: {{ credentials.messaging.user.username }}
                password: {{ credentials.messaging.user.password }}
            path: /neutron
        aux_conf:
          policies:
          - vhost: neutron
            name: default-policy
            pattern: '^(?!amq\.).*'
            definition:
              message-ttl: 120000
          - vhost: neutron
            name: results_expire
            pattern: '^results\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: neutron
            name: tasks_expire
            pattern: '^tasks\.'
            definition:
              expires: 3600000
            priority: 1
  {%- if stacklight_enabled %}
        prometheus_exporter:
          rabbit_exporters: "overview,exchange,node"
  {%- endif %}
{%- endif %}
  - name: openstack-openvswitch
    chart: {{spec.common.infra.repo}}/openvswitch
    values:
      images:
        tags:
{%- for image in [
    "openvswitch_db_server",
    "openvswitch_vswitchd",
    "dep_check",
    "image_repo_sync",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{%- if spec.get('migration', {}).get('neutron', {}).get('deploy_main_service', true) %}
  - name: openstack-neutron
    chart: {{spec.common.openstack.repo}}/neutron
    values:
      images:
        tags:
{%- for image in [
    "neutron_metadata",
    "db_drop",
    "image_repo_sync",
    "neutron_l2gw",
    "neutron_bagpipe_bgp",
    "neutron_openvswitch_agent",
    "neutron_db_sync",
    "db_init",
    "neutron_dhcp",
    "dep_check",
    "ks_user",
    "ks_service",
    "neutron_linuxbridge_agent",
    "ks_endpoints",
    "neutron_l3",
    "neutron_sriov_agent_init",
    "bootstrap",
    "neutron_ironic_agent",
    "neutron_sriov_agent",
    "rabbit_init",
    "neutron_server",
    "purge_test",
    "test",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      pod:
        probes:
          dhcp_agent:
            dhcp_agent:
              readiness:
                enabled: false
          l3_agent:
            l3_agent:
              readiness:
                enabled: false
          ovs_agent:
            ovs_agent:
              readiness:
                enabled: false
      {%- if spec.get('features', {}).get('neutron', {}).get('dvr', {}).get('enabled', False) %}
      labels:
        agent:
          l3:
            node_affinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 2
                preference:
                  matchExpressions:
                  - key: openstack-gateway
                    operator: In
                    values:
                    - enabled
              - weight: 2
                preference:
                  matchExpressions:
                  - key: openstack-compute-node
                    operator: In
                    values:
                    - enabled
              - weight: 1
                preference:
                  matchExpressions:
                  - key: openstack-control-plane
                    operator: In
                    values:
                    - enabled
          metadata:
            node_affinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 2
                preference:
                  matchExpressions:
                  - key: openstack-gateway
                    operator: In
                    values:
                    - enabled
              - weight: 2
                preference:
                  matchExpressions:
                  - key: openstack-compute-node
                    operator: In
                    values:
                    - enabled
              - weight: 1
                preference:
                  matchExpressions:
                  - key: openstack-control-plane
                    operator: In
                    values:
                    - enabled
      {%- endif %}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_admin_identity.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            neutron:
              username: {{ credentials.database.user.username }}
              password: {{ credentials.database.user.password }}
{%- if messaging.get('dedicated_rabbitmq', {}).get('enabled', True) %}
        oslo_messaging:
          <<: *neutron_endpoints_oslo_messaging
{%- endif %}
{% include 'base/_notifications.yaml' %}
{%- if spec.get('features', {}).get('ssl', {}).get('public_endpoints', {}).get('enabled', True) %}
        network:
          host_fqdn_override:
            public:
              host: neutron.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          hosts:
            admin:
              host: neutron-server
            default: neutron
            internal: neutron-server
            public:
              host: neutron
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          port:
            api:
              admin: 9696
              default: 80
              internal: 9696
              public: 443
          scheme:
            default: http
            public: https
{%- endif %}
      manifests:
        job_rabbit_init: false
{%- if spec.get('features', {}).get('ssl', {}).get('public_endpoints', {}).get('enabled', True) %}
        secret_ca_bundle: true
{%- endif %}
      network:
        interface:
          tunnel: {{ spec.features.neutron.tunnel_interface }}
      conf:
        paste:
          app:neutronversions:
            paste.app_factory: neutron.pecan_wsgi.app:versions_factory
        neutron:
          cache:
            backend: oslo_cache.memcache_pool
          keystone_authtoken:
            memcache_security_strategy: ENCRYPT
            memcache_secret_key: {{ credentials.memcached }}
          DEFAULT:
            api_workers: 4
            # Combined DVR + L3 HA is not recommended until load tested (had issues in the past)
            {%- if spec.get('features', {}).get('neutron', {}).get('dvr', {}).get('enabled', False) %}
            l3_ha: False
            {%- else %}
            l3_ha: True
            {%- endif %}
            max_l3_agents_per_router: 3
            l3_ha_network_type: vxlan
            dhcp_agents_per_network: 2
            {%- if 'dns' in spec.features.services %}
            external_dns_driver: designate
            {%- endif %}
            {%- if spec.get('features', {}).get('neutron', {}).get('dvr', {}).get('enabled', False) %}
            router_distributed: True
            {%- endif %}
          oslo_messaging_notifications:
            topics: {{ notification_topics|join(',') }}
        logging:
          logger_neutron:
            level: {{ spec.get('features', {}).get('logging', {}).get('neutron', {}).get('level', 'INFO') }}
# TODO: make other networks types configurable
{%- set networks = {'flat': [], 'vlan': []} %}
{%- set bridge_mappings = [] %}
{%- set physnet_vlan_mappings = [] %}
{%- set physnet_mtus = [] %}
{%- for network in spec.features.neutron.external_networks %}
    {%- for network_type in network.network_types %}
        {%- do networks[network_type].append(network.physnet) %}
    {%- endfor %}
    {%- if network.get('vlan_ranges') %}
        {%- do physnet_vlan_mappings.append(network.physnet + ':' + network.vlan_ranges) %}
    {%- endif %}
    {%- do bridge_mappings.append(network.physnet + ':' + network.bridge) %}
    {%- if network.get('mtu') %}
        {%- do physnet_mtus.append(network.physnet + ':' + network.mtu|string) %}
    {%- endif %}
{%- endfor %}
        plugins:
          ml2_conf:
            {%- if physnet_vlan_mappings %}
            ml2_type_vlan:
              network_vlan_ranges: {{ ','.join(physnet_vlan_mappings) }}
            {%- endif %}
            ml2_type_flat:
              flat_networks: {{ ','.join(networks.flat) }}
              {%- if physnet_mtus %}
            ml2:
              physical_network_mtus: {{ physnet_mtus }}
              {%- endif %}
          openvswitch_agent:
            agent:
              tunnel_types: vxlan
              {%- if spec.get('features', {}).get('neutron', {}).get('dvr', {}).get('enabled', False) %}
              enable_distributed_routing: True
              {%- endif %}
            ovs:
              bridge_mappings: {{ ','.join(bridge_mappings) }}
          linuxbridge_agent:
            linux_bridge:
              bridge_mappings: {{ ','.join(bridge_mappings) }}
        auto_bridge_add:
{%- for network in spec.features.neutron.external_networks %}
          {{ network.bridge }}: {{ network.interface }}
{%- endfor %}
        {%- if spec.get('features', {}).get('neutron', {}).get('dvr', {}).get('enabled', False) %}
        overrides:
          neutron_l3-agent:
            labels:
            - label:
                key: openstack-compute-node
                values:
                - "enabled"
              conf:
                l3_agent:
                  DEFAULT:
                    agent_mode: dvr
            - label:
                key: openstack-control-plane
                values:
                - "enabled"
              conf:
                l3_agent:
                  DEFAULT:
                    agent_mode: dvr_snat
            - label:
                key: openstack-gateway
                values:
                - "enabled"
              conf:
                l3_agent:
                  DEFAULT:
                    agent_mode: dvr_snat
        {%- endif %}
{%- endif %}
