#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set latest_openstack_versions = openstack_versions[openstack_versions.index(spec.openstack_version):openstack_versions.index(spec.openstack_version)+2] %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set enabled_vhosts = [] %}
{%- set notification_vhost = 'openstack' %}
{%- set external_notifications_enabled = spec.get('features', {}).get('messaging', {}).get('notifications', {}).get('external', {}).get('enabled', False) %}
{%- set external_notifications_topics = spec.get('features', {}).get('messaging', {}).get('notifications', {}).get('external', {}).get('topics', []) %}

spec:
  releases:
  - name: openstack-rabbitmq
    chart: {{spec.common.infra.get('repo', spec.common.charts.repo)}}/rabbitmq
    values:
{% include 'base/_rabbitmq_images.yaml' %}
  {%- if stacklight_enabled %}
      monitoring:
        prometheus:
          enabled: true
  {%- endif %}
      pod:
        replicas:
          server: 1
        probes:
          server:
            rabbitmq:
              readiness:
                params:
                  periodSeconds: 60
                  timeoutSeconds: 30
              liveness:
                params:
                  periodSeconds: 60
                  timeoutSeconds: 30
      manifests:
        network_policy: false
        job_users_create: true
        amqproxy: true
        {%- if external_notifications_enabled %}
        service_external: true
        {%- endif %}
      volume:
        enabled: false
      conf:
        users:
          {%- if 'identity' in services %}
          {%- do enabled_vhosts.append('keystone') %}
          keystone_service:
            auth:
              keystone_username:
                username: {{ credentials['identity'].messaging.user.username }}
                password: {{ credentials['identity'].messaging.user.password }}
            path: /keystone
          keystone_service_notifications:
            auth:
              keystone_username:
                username: {{ credentials['identity'].notifications.user.username }}
                password: {{ credentials['identity'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'image' in services %}
          {%- do enabled_vhosts.append('glance') %}
          glance_service:
            auth:
              glance_username:
                username: {{ credentials['image'].messaging.user.username }}
                password: {{ credentials['image'].messaging.user.password }}
            path: /glance
          glance_service_notifications:
            auth:
              glance_username:
                username: {{ credentials['image'].notifications.user.username }}
                password: {{ credentials['image'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'block-storage' in services %}
          {%- do enabled_vhosts.append('cinder') %}
          cinder_service:
            auth:
              cinder:
                username: {{ credentials['block-storage'].messaging.user.username }}
                password: {{ credentials['block-storage'].messaging.user.password }}
            path: /cinder
          cinder_service_notifications:
            auth:
              cinder:
                username: {{ credentials['block-storage'].notifications.user.username }}
                password: {{ credentials['block-storage'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'orchestration' in services %}
          heat_service:
            auth:
              heat:
                username: {{ credentials['orchestration'].messaging.user.username }}
                password: {{ credentials['orchestration'].messaging.user.password }}
            path:
            {%- for version in latest_openstack_versions %}
            - /heat_{{ version }}
            {%- endfor %}
          heat_service_notifications:
            auth:
              heat:
                username: {{ credentials['orchestration'].notifications.user.username }}
                password: {{ credentials['orchestration'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'networking' in services %}
          {%- do enabled_vhosts.append('neutron') %}
          neutron_service:
            auth:
              neutron:
                username: {{ credentials['networking'].messaging.user.username }}
                password: {{ credentials['networking'].messaging.user.password }}
            path: /neutron
          neutron_service_notifications:
            auth:
              neutron:
                username: {{ credentials['networking'].notifications.user.username }}
                password: {{ credentials['networking'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'compute' in services %}
          {%- do enabled_vhosts.append('nova') %}
          nova_service:
            auth:
              nova:
                username: {{ credentials['compute'].messaging.user.username }}
                password: {{ credentials['compute'].messaging.user.password }}
            path: /nova
          nova_service_notifications:
            auth:
              nova:
                username: {{ credentials['compute'].notifications.user.username }}
                password: {{ credentials['compute'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'load-balancer' in services %}
          {%- do enabled_vhosts.append('octavia') %}
          octavia_service:
            auth:
              octavia:
                username: {{ credentials['load-balancer'].messaging.user.username }}
                password: {{ credentials['load-balancer'].messaging.user.password }}
            path: /octavia
          octavia_service_notifications:
            auth:
              octavia:
                username: {{ credentials['load-balancer'].notifications.user.username }}
                password: {{ credentials['load-balancer'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'dns' in services %}
          {%- do enabled_vhosts.append('designate') %}
          designate_service:
            auth:
              designate:
                username: {{ credentials['dns'].messaging.user.username }}
                password: {{ credentials['dns'].messaging.user.password }}
            path: /designate
          designate_service_notifications:
            auth:
              designate:
                username: {{ credentials['dns'].notifications.user.username }}
                password: {{ credentials['dns'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'key-manager' in services %}
          {%- do enabled_vhosts.append('barbican') %}
          barbican_service:
            auth:
              barbican:
                username: {{ credentials['key-manager'].messaging.user.username }}
                password: {{ credentials['key-manager'].messaging.user.password }}
            path: /barbican
          barbican_service_notifications:
            auth:
              barbican:
                username: {{ credentials['key-manager'].notifications.user.username }}
                password: {{ credentials['key-manager'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if stacklight_enabled %}
          stacklight_service_notifications:
            auth:
              stacklight:
                username: {{ credentials['stacklight'].username }}
                password: {{ credentials['stacklight'].password }}
            path: /openstack
          {%- endif %}
          {%- if 'baremetal' in services %}
          {%- do enabled_vhosts.append('ironic') %}
          ironic_service:
            auth:
              ironic:
                username: {{ credentials['baremetal'].messaging.user.username }}
                password: {{ credentials['baremetal'].messaging.user.password }}
            path: /ironic
          ironic_service_notifications:
            auth:
              ironic:
                username: {{ credentials['baremetal'].notifications.user.username }}
                password: {{ credentials['baremetal'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'alarming' in services %}
          {%- do enabled_vhosts.append('aodh') %}
          alarming_service:
            auth:
              alarming:
                username: {{ credentials['alarming'].messaging.user.username }}
                password: {{ credentials['alarming'].messaging.user.password }}
            path: /aodh
          alarming_service_notifications:
            auth:
              alarming:
                username: {{ credentials['alarming'].notifications.user.username }}
                password: {{ credentials['alarming'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'metering' in services %}
          {%- do enabled_vhosts.append('ceilometer') %}
          metering_service:
            auth:
              metering:
                username: {{ credentials['metering'].messaging.user.username }}
                password: {{ credentials['metering'].messaging.user.password }}
            path: /ceilometer
          metering_service_notifications:
            auth:
              metering:
                username: {{ credentials['metering'].notifications.user.username }}
                password: {{ credentials['metering'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'instance-ha' in services %}
          {%- do enabled_vhosts.append('masakari') %}
          masakari_service:
            auth:
              masakari:
                username: {{ credentials['instance-ha'].messaging.user.username }}
                password: {{ credentials['instance-ha'].messaging.user.password }}
            path: /masakari
          masakari_service_notifications:
            auth:
              masakari:
                username: {{ credentials['instance-ha'].notifications.user.username }}
                password: {{ credentials['instance-ha'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if 'shared-file-system' in services %}
          {%- do enabled_vhosts.append('manila') %}
          manila_service:
            auth:
              manila:
                username: {{ credentials['shared-file-system'].messaging.user.username }}
                password: {{ credentials['shared-file-system'].messaging.user.password }}
            path: /manila
          manila_service_notifications:
            auth:
              manila:
                username: {{ credentials['shared-file-system'].notifications.user.username }}
                password: {{ credentials['shared-file-system'].notifications.user.password }}
            path: /openstack
          {%- endif %}
          {%- if external_notifications_enabled %}
          {%- for topic in external_notifications_topics %}
          {{ topic }}_external_notifications:
            auth:
              {{ topic }}:
                username: {{ notifications_creds[topic].username }}
                password: {{ notifications_creds[topic].password }}
            path: /openstack
          {%- endfor %}
          {%- endif %}
        aux_conf:
          policies:
  {%- if 'orchestration' in services %}
  {%- for version in latest_openstack_versions %}
          - vhost: heat_{{ version }}
            name: heat_engine_rpc_expire
            pattern: '^heat-engine-listener\.'
            definition:
              expires: 600000
            priority: 1
          - vhost: heat_{{ version }}
            name: heat_worker_rpc_expire
            pattern: '^engine_worker\.'
            definition:
              expires: 600000
            priority: 1
          - vhost: heat_{{ version }}
            name: results_expire
            pattern: '^results\.'
            definition:
              expires: 600000
            priority: 1
          - vhost: heat_{{ version }}
            name: tasks_expire
            pattern: '^tasks\.'
            definition:
              expires: 600000
            priority: 1
          - vhost: heat_{{ version }}
            name: default-policy
            pattern: '^(?!amq\.).*'
            definition:
              message-ttl: 120000
  {%- endfor %}
  {%- endif %}
          - vhost: {{ notification_vhost }}
            name: default-policy-{{ notification_vhost }}
            pattern: '.*'
            definition:
              message-ttl: 120000
              # NOTE(vsaienko): for notifications set only message TTL, we assume
              # all queues here created for a long time and shouldn't be deleted.
  {%- for item in enabled_vhosts %}
          - vhost: {{ item }}
            name: default-policy-{{ item }}
            pattern: '^(?!amq\.).*'
            definition:
              message-ttl: 120000
              expires: 600000
          - vhost: {{ item }}
            name: results_expire_{{ item }}
            pattern: '^results\.'
            definition:
              expires: 600000
            priority: 1
          - vhost: {{ item }}
            name: tasks_expire_{{ item }}
            pattern: '^tasks\.'
            definition:
              expires: 600000
            priority: 1
  {%- endfor %}
  {%- if stacklight_enabled %}
        prometheus_exporter:
          rabbit_exporters: "overview,exchange,node"
  {%- endif %}
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
        oslo_messaging:
          auth:
            user:
              username: {{ admin_creds.messaging.username }}
              password: {{ admin_creds.messaging.password }}
          statefulset:
            replicas: 1
            name: openstack-rabbitmq-rabbitmq
          hosts:
            default: rabbitmq
          path: /openstack
