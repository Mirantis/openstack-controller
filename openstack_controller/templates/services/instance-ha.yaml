#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set service = 'masakari' %}
{%- set messaging = spec.get('features', {}).get('messaging', {}) %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}
{%- set components_with_dedicated_messaging = spec.get('features', {}).get('messaging', {}).get('components_with_dedicated_messaging', []) %}
{%- set masakari_db_cleanup = spec.get('features', {}).get('database', {}).get('cleanup', {}).get('masakari', {'enabled': true}) %}
{%- from 'macros/etcd3.j2' import get_etcd3_endpoint %}

spec:
  available_releases:
    - "openstack-masakari-rabbitmq"
    - "openstack-masakari"
  releases:
{%- if 'instance-ha' in components_with_dedicated_messaging %}
  - name: openstack-masakari-rabbitmq
    chart: {{spec.common.infra.repo}}/rabbitmq
    values:
{% include 'base/_rabbitmq_images.yaml' %}
  {%- if stacklight_enabled %}
      monitoring:
        prometheus:
          enabled: true
  {%- endif %}
      pod:
        replicas:
          server: 1
      manifests:
        network_policy: false
        job_users_create: true
      volume:
        enabled: false
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_messaging_dedicated.yaml' %}
      conf:
        users:
          masakari:
            auth:
              service_user:
                username: {{ credentials.messaging.user.username }}
                password: {{ credentials.messaging.user.password }}
            path: /masakari
        aux_conf:
          policies:
          - vhost: masakari
            name: default-policy
            pattern: '^(?!amq\.).*'
            definition:
              message-ttl: 120000
          - vhost: masakari
            name: results_expire
            pattern: '^results\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: masakari
            name: tasks_expire
            pattern: '^tasks\.'
            definition:
              expires: 3600000
            priority: 1
  {%- if stacklight_enabled %}
        prometheus_exporter:
          rabbit_exporters: "overview,exchange,node"
  {%- endif %}
{%- endif %}
  - name: openstack-masakari
    chart: {{spec.common.openstack.repo}}/masakari
    values:
      images:
        tags:
{%- for image in [
    "test",
    "dep_check",
    "db_init",
    "db_drop",
    "bootstrap",
    "masakari_db_sync",
    "masakari_db_purge",
    "ks_user",
    "ks_service",
    "ks_endpoints",
    "masakari_api",
    "masakari_engine",
    "masakari_monitors",
    "image_repo_sync",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      conf:
        policy.d:
          01-controller-default.yaml: {{ service_policy }}
          02-custom.yaml: {{ spec.get("features", {}).get("policies", {}).get("masakari", {}) }}
        masakari:
          DEFAULT:
            os_privileged_user_name: {{ admin_creds.identity.username }}
            os_privileged_user_password: {{ admin_creds.identity.password }}
            nova_catalog_admin_info: compute:nova:internalURL
          coordination:
            backend_url: {{ get_etcd3_endpoint(spec.openstack_version, 'etcd3gw') }}
          keystone_authtoken:
            memcache_security_strategy: ENCRYPT
            memcache_secret_key: {{ credentials.memcached }}
            {%- if spec.openstack_version not in ("queens", "rocky", "stein") %}
            service_type: instance-ha
            {%- endif %}
        logging:
          logger_masakari:
            level: {{ spec.get('features', {}).get('logging', {}).get('masakari', {}).get('level', 'INFO') }}
          logger_masakarimonitors:
            level: {{ spec.get('features', {}).get('logging', {}).get('masakari', {}).get('level', 'INFO') }}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
      manifests:
        cron_job_db_purge: {{ masakari_db_cleanup.enabled }}
        network_policy: false
        job_rabbit_init: false
        secret_ca_bundle: true
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_admin_identity.yaml' %}
{% include 'base/_cache.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            masakari:
              username: {{ credentials.database.user.username }}
              password: {{ credentials.database.user.password }}
{%- if 'instance-ha' in components_with_dedicated_messaging %}
{% include 'base/_messaging_dedicated.yaml' %}
{%- else %}
{% include 'base/_messaging_shared.yaml' %}
{%- endif %}
{% include 'base/_notifications.yaml' %}
        instance_ha:
          host_fqdn_override:
            public:
              host: masakari.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            admin:
              host: masakari-api
            default: masakari
            internal: masakari-api
            public:
              host: masakari
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            api:
              admin: 15868
              default: 80
              internal: 15868
              public: 443
          scheme:
            default: http
            public: https
      jobs:
{% include 'base/_ks_jobs.yaml' %}
{%- if masakari_db_cleanup.enabled %}
        db_purge:
          enabled: {{ masakari_db_cleanup.enabled }}
          cron: {{ masakari_db_cleanup.get("schedule", "1 3 * * 1") }}
          script:
            config:
              age: {{ masakari_db_cleanup.get("age", 30) }}
              max_rows: {{ masakari_db_cleanup.get("batch", 1000) }}
{%- endif %}
