#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set service = 'heat' %}
{%- set components_with_dedicated_messaging = spec.get('features', {}).get('messaging', {}).get('components_with_dedicated_messaging', []) %}
{%- set latest_openstack_versions = openstack_versions[openstack_versions.index(spec.openstack_version):] %}
{%- set tungstenfabric_enabled = spec.features.neutron.get('backend', 'ml2') == 'tungstenfabric' %}
{%- set tungstenfabric_custom_api_opts = tf_api_service is defined and tf_api_port is defined %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}

spec:
  releases:
{%- if 'orchestration' in components_with_dedicated_messaging %}
  - name: openstack-heat-rabbitmq
    chart: {{spec.common.infra.repo}}/rabbitmq
    values:
{% include 'base/_rabbitmq_images.yaml' %}
  {%- if stacklight_enabled %}
      monitoring:
        prometheus:
          enabled: true
  {%- endif %}
      pod:
        replicas:
          server: 1
      manifests:
        network_policy: false
        job_users_create: true
      volume:
        enabled: false
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_messaging_dedicated.yaml' %}
      conf:
        users:
          heat:
            auth:
              service_user:
                username: {{ credentials.messaging.user.username }}
                password: {{ credentials.messaging.user.password }}
            path:
            {%- for version in latest_openstack_versions %}
            - /heat_{{ version }}
            {%- endfor %}
        aux_conf:
          policies:
  {%- for version in latest_openstack_versions %}
          - vhost: heat_{{ version }}
            name: heat_engine_rpc_expire
            pattern: '^heat-engine-listener\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: heat_{{ version }}
            name: heat_worker_rpc_expire
            pattern: '^engine_worker\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: heat_{{ version }}
            name: results_expire
            pattern: '^results\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: heat_{{ version }}
            name: tasks_expire
            pattern: '^tasks\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: heat_{{ version }}
            name: default-policy
            pattern: '^(?!amq\.).*'
            definition:
              message-ttl: 120000
  {%- endfor %}
  {%- if stacklight_enabled %}
        prometheus_exporter:
          rabbit_exporters: "overview,exchange,node"
  {%- endif %}
{%- endif %}
{%- if spec.get('migration', {}).get('heat', {}).get('deploy_main_service', True) %}
  - name: openstack-heat
    chart: {{spec.common.openstack.repo}}/heat
    values:
      images:
        tags:
{%- for image in [
    "db_drop",
    "image_repo_sync",
    "heat_engine",
    "heat_api",
    "ks_endpoints",
    "db_init",
    "dep_check",
    "heat_engine_cleaner",
    "ks_service",
    "ks_trusts",
    "heat_purge_deleted",
    "heat_db_sync",
    "bootstrap",
    "rabbit_init",
    "heat_cfn",
    "heat_cloudwatch",
    "test",
    "ks_user",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
      manifests:
        network_policy: false
        job_rabbit_init: false
        secret_ca_bundle: true
      conf:
        policy.d:
          01-controller-default.yaml: {{ service_policy }}
          02-custom.yaml: {{ spec.get("features", {}).get("policies", {}).get("heat", {}) }}
        heat:
          keystone_authtoken:
            memcache_security_strategy: ENCRYPT
            memcache_secret_key: {{ credentials.memcached }}
          clients_swift:
            endpoint_type: public
          oslo_messaging_notifications:
            topics: {{ notification_topics|join(',') }}
        logging:
          logger_heat:
            level: {{ spec.get('features', {}).get('logging', {}).get('heat', {}).get('level', 'INFO') }}
{%- set enabled_plugins = [] %}
{%- if tungstenfabric_enabled %}
  {%- if openstack_version not in ['queens', 'rocky', 'stein', 'train'] %}
    {%- do enabled_plugins.append('vnc_api/gen/heat') %}
  {%- endif %}
{%- endif %}
{%- if spec.features.neutron.get('bgpvpn', {}).get('enabled') %}
  {%- do enabled_plugins.append('networking_bgpvpn_heat') %}
{%- endif %}
{%- if enabled_plugins %}
        plugins: {{ enabled_plugins }}
{%- endif %}
      network:
        core_plugin: {{ spec.features.neutron.get('backend', 'ml2') }}
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_admin_identity.yaml' %}
{% include 'base/_cache.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            heat:
              username: {{ credentials.database.user.username }}
              password: {{ credentials.database.user.password }}
{%- if 'orchestration' in components_with_dedicated_messaging %}
{% include 'base/_messaging_dedicated.yaml' %}
{%- else %}
{% include 'base/_messaging_shared.yaml' %}
{%- endif %}
{% include 'base/_notifications.yaml' %}
        orchestration:
          host_fqdn_override:
            public:
              host: heat.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            admin:
              host: heat-api
            default: heat
            internal: heat-api
            public:
              host: heat
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            api:
              admin: 8004
              default: 80
              internal: 8004
              public: 443
          scheme:
            default: http
            public: https
        cloudformation:
          host_fqdn_override:
            public:
              host: cloudformation.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            admin:
              host: heat-cfn
            default: cloudformation
            internal: heat-cfn
            public:
              host: cloudformation
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            api:
              admin: 8000
              default: 80
              internal: 8000
              public: 443
          scheme:
            default: http
            public: https
      {%- if tungstenfabric_enabled and tungstenfabric_custom_api_opts %}
        tungstenfabric:
          host_fqdn_override:
            public:
              host: {{ tf_api_service }}.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            default: {{ tf_api_service }}
            public:
              host: {{ tf_api_service }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            api:
              default: {{ tf_api_port }}
              public: 443
          scheme:
            default: http
            public: https
      {%- endif %}
      jobs:
{% include 'base/_ks_jobs.yaml' %}
{%- endif %}
