---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: osh-system
  name: osh-operator-account
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: osh-operator-role-cluster
rules:

  # NOTE(pas-ha) needed for multi-instance, including dev override
  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, get]
  - apiGroups: [zalando.org]
    resources: [clusterkopfpeerings]
    verbs: [list, get, watch, patch]

  # Application: read-only access for watching cluster-wide.
  - apiGroups: [lcm.mirantis.com]
    resources: [openstackdeployments]
    verbs: [list, get, watch]
  - apiGroups: [lcm.mirantis.com]
    resources: [helmbundles]
    verbs: [list, get, watch]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  namespace: openstack
  name: osh-operator-role-openstack
rules:

  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [""]
    resources: [events]
    verbs: [create]
  # NOTE(pas-ha) needed for multi-instance, including dev override
  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [zalando.org]
    resources: [kopfpeerings]
    verbs: [list, get, watch, patch]

  # Application: manage ceph access data(secrets,configmaps)
  - apiGroups: [""]
    resources: [secrets,configmaps]
    verbs: [list, get, create]

  # Application: watching & handling for the custom resource we declare.
  - apiGroups: [lcm.mirantis.com]
    resources: [openstackdeployments]
    verbs: [list, get, watch, patch]

  # Application: resources we produce and manipulate.
  - apiGroups: [lcm.mirantis.com]
    resources: [helmbundles]
    verbs: [list, get, watch, create, update, patch, delete]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  namespace: "ceph-lcm-mirantis"
  name: "osh-operator-role-ceph-lcm-mirantis"
rules:

  # Application: read ceph access data from shared namespace.
  - apiGroups: [""]
    resources: [secrets,configmaps]
    verbs: [list, get]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: osh-operator-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: osh-operator-role-cluster
subjects:
  - kind: ServiceAccount
    name: osh-operator-account
    namespace: osh-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  namespace: openstack
  name: osh-operator-rolebinding-openstack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: osh-operator-role-openstack
subjects:
  - kind: ServiceAccount
    name: osh-operator-account
    namespace: osh-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  namespace: "ceph-lcm-mirantis"
  name: "osh-operator-rolebinding-ceph-lcm-mirantis"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "osh-operator-role-ceph-lcm-mirantis"
subjects:
  - kind: ServiceAccount
    name: osh-operator-account
    namespace: osh-system
---
apiVersion: zalando.org/v1
kind: KopfPeering
metadata:
  namespace: openstack
  name: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: osh-operator
  namespace: osh-system
spec:
  replicas: 1
  selector:
    matchLabels:
      application: osh-operator
  template:
    metadata:
      labels:
        application: osh-operator
    spec:
      serviceAccountName: osh-operator-account
      containers:
      - name: osh-controller
        # image: pshchelo/osh-operator:latest
        image: docker-prod-local.docker.mirantis.net/mcp/osh-operator:nightly
        imagePullPolicy: Always
        command:
          - kopf
          - run
          - '-m'
          - osh_operator.openstackdeployment
          - '-m'
          - osh_operator.helmbundle
          - '-n'
          - openstack
...
