#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set messaging = spec.get('features', {}).get('messaging', {}) %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}

spec:
  releases:
{%- if messaging.get('dedicated_rabbitmq', {}).get('enabled', True) %}
  - name: openstack-barbican-rabbitmq
    chart: {{spec.common.infra.repo}}/rabbitmq
    values:
{% include 'base/_rabbitmq_images.yaml' %}
  {%- if stacklight_enabled %}
      monitoring:
        prometheus:
          enabled: true
  {%- endif %}
      pod:
        replicas:
          server: 1
      manifests:
        network_policy: false
        job_users_create: true
      volume:
        enabled: false
      endpoints:
        cluster_domain_suffix: {{ spec.domain_name }}
        oslo_messaging: &barbican_endpoints_oslo_messaging
          auth:
            admin:
              username: {{ admin_creds.messaging.username }}
              password: {{ admin_creds.messaging.password }}
            barbican:
              username: {{ credentials.messaging.user.username }}
              password: {{ credentials.messaging.user.password }}
          statefulset:
            replicas: 1
            name: openstack-barbican-rabbitmq-rabbitmq
          hosts:
            default: rabbitmq-barbican
            path: /barbican
        prometheus_rabbitmq_exporter:
          hosts:
            default: rabbitmq-exporter-barbican
      conf:
        users:
          barbican:
            auth:
              service_user:
                username: {{ credentials.messaging.user.username }}
                password: {{ credentials.messaging.user.password }}
            path: /barbican
        aux_conf:
          policies:
          - vhost: barbican
            name: default-policy
            pattern: '^(?!amq\.).*'
            definition:
              message-ttl: 120000
          - vhost: barbican
            name: results_expire
            pattern: '^results\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: barbican
            name: tasks_expire
            pattern: '^tasks\.'
            definition:
              expires: 3600000
            priority: 1
  {%- if stacklight_enabled %}
        prometheus_exporter:
          rabbit_exporters: "overview,exchange,node"
  {%- endif %}
{%- endif %}
  - name: openstack-barbican
    chart: {{spec.common.openstack.repo}}/barbican
    values:
      images:
        tags:
{%- for image in [
    "ks_service",
    "bootstrap",
    "db_drop",
    "barbican_db_sync",
    "image_repo_sync",
    "ks_endpoints",
    "rabbit_init",
    "db_init",
    "dep_check",
    "ks_user",
    "scripted_test",
    "barbican_api",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
      conf:
        barbican:
          keystone_authtoken:
            memcache_security_strategy: ENCRYPT
            memcache_secret_key: {{ credentials.memcached }}
          oslo_messaging_notifications:
            topics: {{ notification_topics|join(',') }}
          DEFAULT:
            sql_idle_timeout: 3600
            sql_max_retries: -1
            sql_retry_interval: 1
{%- if spec.get('features', {}).get('barbican', {}).get('backend', {}).get('simple_crypto', {}).get('enabled', False) %}
          secretstore:
            namespace: barbican.secretstore.plugin
            enabled_secretstore_plugins: store_crypto
          crypto:
            enabled_crypto_plugins: simple_crypto
          simple_crypto_plugin:
            kek: {{ spec.features.barbican.backend.simple_crypto.kek }}
{%- endif %}
        logging:
          logger_barbican:
            level: {{ spec.get('features', {}).get('logging', {}).get('barbican', {}).get('level', 'INFO') }}
        # TODO(vsaienko): drop policy settings in upstream values.yaml to ensure in-code policy
        # defaults are used.
        policy:
          secret_project_match: project_id:%(target.secret.project_id)s
          secret_creator_user: user_id:%(target.secret.creator_id)s
          container_project_match: project_id:%(target.container.project_id)s
          container_creator_user: user_id:%(target.container.creator_id)s
      manifests:
        network_policy: false
        job_rabbit_init: false
{%- if spec.get('features', {}).get('ssl', {}).get('public_endpoints', {}).get('enabled', True) %}
        secret_ca_bundle: true
{%- endif %}
      endpoints:
        cluster_domain_suffix: {{ spec.domain_name }}
{% include 'base/_admin_identity.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            barbican:
              username: {{ credentials.database.user.username }}
              password: {{ credentials.database.user.password }}
{%- if messaging.get('dedicated_rabbitmq', {}).get('enabled', True) %}
        oslo_messaging:
          <<: *barbican_endpoints_oslo_messaging
{%- endif %}
        oslo_messaging_notifications:
          auth:
            barbican:
              username: barbican
              password: password
          host_fqdn_override: {}
          hosts:
            default: rabbitmq
          path: /openstack
          port:
            amqp:
              default: 5672
            http:
              default: 15672
          scheme: rabbit
          statefulset:
            name: openstack-rabbitmq-rabbitmq
            replicas: 1
{%- if spec.get('features', {}).get('ssl', {}).get('public_endpoints', {}).get('enabled', True) %}
        key_manager:
          host_fqdn_override:
            public:
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          hosts:
            admin:
              host: barbican-api
            default: barbican
            internal: barbican-api
            public:
              host: barbican
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          port:
            api:
              admin: 9311
              default: 80
              internal: 9311
              public: 443
          scheme:
            default: http
            public: https
{%- endif %}
