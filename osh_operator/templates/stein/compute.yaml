apiVersion: lcm.mirantis.com/v1alpha1
kind: HelmBundle
metadata:
  name: openstack-compute
{%- if spec.get('features', {}).get('nova', {}).get('images', {}).get('backend') == 'ceph' %}
  annotations:
    lcm.mirantis.com/ceph_required: 'True'
{%- endif %}
spec:
  releases:
{%- if spec.get('features', {}).get('messaging', {}).get('dedicated_rabbitmq', {}).get('enabled', True) %}
  - name: openstack-nova-rabbitmq
    chart: {{spec.common.infra.repo}}/rabbitmq
    values:
      pod:
        replicas:
          server: 1
      manifests:
        network_policy: false
{%- if spec.get('features', {}).get('messaging', {}).get('create_user_credentials', False) %}
        job_users_create: true
{%- endif %}
      volume:
        enabled: false
      endpoints:
        cluster_domain_suffix: {{ spec.domain_name }}
        oslo_messaging: &nova_endpoints_oslo_messaging
          statefulset:
            replicas: 1
            name: openstack-nova-rabbitmq-rabbitmq
          hosts:
            default: rabbitmq-nova
          path: /nova
{%- if spec.get('features', {}).get('messaging', {}).get('create_user_credentials', False) %}
      conf:
        users:
          nova:
            auth:
              service_user:
                username: nova
                password: password
            path: /nova
{%- endif %}
{%- endif %}
  - name: openstack-libvirt
    chart: {{spec.common.infra.repo}}/libvirt
    values:
      images:
        tags:
          libvirt: docker-prod-virtual.docker.mirantis.net/mcp/libvirt:4.0.0-bionic-1554881274591
      manifests:
        network_policy: false
{%- if (spec.get('features', {}).get('nova', {}).get('images', {}).get('backend') == 'ceph') or (spec.get('features', {}).get('cinder', {}).get('volume', {}).get('backend') == 'ceph') %}
      ceph_client:
        configmap: rook-ceph-config
        user_secret_name: rook-ceph-admin-keyring
{%- endif %}
      conf:
        ceph:
{%- if (spec.get('features', {}).get('nova', {}).get('images', {}).get('backend') == 'ceph') or (spec.get('features', {}).get('cinder', {}).get('volume', {}).get('backend') == 'ceph') %}
          enabled: true
{%- else %}
          enabled: false
{%- endif %}
        nova:
          cinder:
            catalog_info: volumev3::internalURL
        libvirt:
          listen_addr: 0.0.0.0
  - name: openstack-nova
    chart: {{spec.common.openstack.repo}}/nova
    values:
      manifests:
        network_policy: false
{%- if spec.get('features', {}).get('messaging', {}).get('create_user_credentials', False) %}
        job_rabbit_init: false
{%- endif %}
      endpoints:
        cluster_domain_suffix: {{ spec.domain_name }}
        identity:
          auth:
            admin:
              region_name: {{ spec.features.keystone.users.admin.get('region_name', 'RegionOne') }}
              username: {{ spec.features.keystone.users.admin.username }}
              password: {{ spec.features.keystone.users.admin.password }}
              project_name: {{ spec.features.keystone.users.admin.get('project_name', 'admin') }}
              user_domain_name: {{ spec.features.keystone.users.admin.get('user_domain_name', 'default') }}
              project_domain_name: {{ spec.features.keystone.users.admin.get('project_domain_name', 'default') }}
              default_domain_id: {{ spec.features.keystone.users.admin.get('default_domain_id', 'default') }}
{%- if spec.get('features', {}).get('messaging', {}).get('dedicated_rabbitmq', {}).get('enabled', True) %}
        oslo_messaging:
          <<: *nova_endpoints_oslo_messaging
{%- endif %}
        oslo_messaging_notifications:
          auth:
            nova:
              password: password
              username: nova
          host_fqdn_override: {}
          hosts:
            default: rabbitmq
          path: /openstack
          port:
            amqp:
              default: 5672
            http:
              default: 15672
          scheme: rabbit
          statefulset:
            name: openstack-rabbitmq-rabbitmq
            replicas: 1
{%- if spec.get('features', {}).get('ssl', {}).get('public_endpoints', {}).get('enabled', True) %}
        compute:
          host_fqdn_override:
            public:
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          hosts:
            admin:
              host: nova-api
            default: nova
            internal: nova-api
            public:
              host: nova
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          port:
            api:
              admin: 8774
              default: 80
              internal: 8774
              public: 443
          scheme:
            default: http
            public: https
        placement:
          host_fqdn_override:
            public:
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          hosts:
            admin:
              host: placement-api
            default: placement
            internal: placement-api
            public:
              host: placement
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          port:
            api:
              admin: 8778
              default: 80
              internal: 8778
              public: 443
          scheme:
            default: http
            public: https
{%- endif %}
{%- if spec.get('features', {}).get('nova', {}).get('images', {}).get('backend') == 'ceph' %}
      ceph_client:
        configmap: rook-ceph-config
        user_secret_name: rook-ceph-admin-keyring
{%- endif %}
      conf:
        ceph:
{%- if spec.get('features', {}).get('nova', {}).get('images', {}).get('backend') == 'ceph' %}
          enabled: true
{%- elif spec.get('features', {}).get('nova', {}).get('images', {}).get('backend') == 'local' %}
          enabled: false
{%- endif %}
        nova:
          libvirt:
            cpu_mode: custom
            cpu_model: kvm64
            virt_type: kvm
        # TODO(vsaienko): unhardcode this interface
        libvirt:
          live_migration_interface: ens3
