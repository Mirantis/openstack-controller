apiVersion: lcm.mirantis.com/v1alpha1
kind: HelmBundle
metadata:
  name: openstack-networking
spec:
  releases:
{%- if spec.get('features', {}).get('messaging', {}).get('dedicated_rabbitmq', {}).get('enabled', True) %}
  - name: openstack-neutron-rabbitmq
    chart: {{spec.common.infra.repo}}/rabbitmq
    values:
      pod:
        replicas:
          server: 1
      manifests:
        network_policy: false
{%- if spec.get('features', {}).get('messaging', {}).get('create_user_credentials', False) %}
        job_users_create: true
{%- endif %}
      volume:
        enabled: false
      endpoints:
        cluster_domain_suffix: {{ spec.domain_name }}
        oslo_messaging: &neutron_endpoints_oslo_messaging
          statefulset:
            replicas: 1
            name: openstack-neutron-rabbitmq-rabbitmq
          hosts:
            default: rabbitmq-neutron
          path: /neutron
{%- if spec.get('features', {}).get('messaging', {}).get('create_user_credentials', False) %}
      conf:
        users:
          neutron:
            auth:
              service_user:
                username: neutron
                password: password
            path: /neutron
{%- endif %}
{%- endif %}
  - name: openstack-openvswitch
    chart: {{spec.common.infra.repo}}/openvswitch
    values:
      images:
        tags:
          openvswitch_db_server: docker.io/openstackhelm/openvswitch:latest-debian
          openvswitch_vswitchd: docker.io/openstackhelm/openvswitch:latest-debian
      endpoints:
        cluster_domain_suffix: {{ spec.domain_name }}
  - name: openstack-neutron
    chart: {{spec.common.openstack.repo}}/neutron
    values:
      endpoints:
        cluster_domain_suffix: {{ spec.domain_name }}
        identity:
          auth:
            admin:
              region_name: {{ spec.features.keystone.users.admin.get('region_name', 'RegionOne') }}
              username: {{ spec.features.keystone.users.admin.username }}
              password: {{ spec.features.keystone.users.admin.password }}
              project_name: {{ spec.features.keystone.users.admin.get('project_name', 'admin') }}
              user_domain_name: {{ spec.features.keystone.users.admin.get('user_domain_name', 'default') }}
              project_domain_name: {{ spec.features.keystone.users.admin.get('project_domain_name', 'default') }}
              default_domain_id: {{ spec.features.keystone.users.admin.get('default_domain_id', 'default') }}
{%- if spec.get('features', {}).get('messaging', {}).get('dedicated_rabbitmq', {}).get('enabled', True) %}
        oslo_messaging:
          <<: *neutron_endpoints_oslo_messaging
{%- endif %}
        oslo_messaging_notifications:
          auth:
            neutron:
              password: password
              username: neutron
          host_fqdn_override: {}
          hosts:
            default: rabbitmq
          path: /openstack
          port:
            amqp:
              default: 5672
            http:
              default: 15672
          scheme: rabbit
          statefulset:
            name: openstack-rabbitmq-rabbitmq
            replicas: 1
{%- if spec.get('features', {}).get('ssl', {}).get('public_endpoints', {}).get('enabled', True) %}
        network:
          host_fqdn_override:
            public:
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          hosts:
            admin:
              host: neutron-server
            default: neutron
            internal: neutron-server
            public:
              host: neutron
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          port:
            api:
              admin: 9696
              default: 80
              internal: 9696
              public: 443
          scheme:
            default: http
            public: https
{%- endif %}
      manifests:
{%- if spec.get('features', {}).get('messaging', {}).get('create_user_credentials', False) %}
        job_rabbit_init: false
{%- endif %}
      network:
        interface:
          tunnel: ens3
      conf:
        paste:
          app:neutronversions:
            paste.app_factory: neutron.pecan_wsgi.app:versions_factory
        neutron:
          DEFAULT:
            l3_ha: False
            max_l3_agents_per_router: 1
            l3_ha_network_type: vxlan
            dhcp_agents_per_network: 1
# TODO: make other networks types configurable
{%- set networks = {'flat': [], 'vlan': []} %}
{%- set bridge_mappings = [] %}
{%- set physnet_mtus = [] %}
{%- for network in spec.features.neutron.external_networks %}
    {%- for network_type in network.network_types %}
        {%- do networks[network_type].append(network.physnet) %}
    {%- endfor %}
    {%- do bridge_mappings.append(network.physnet + ':' + network.bridge) %}
    {%- if network.get('mtu') %}
        {%- do physnet_mtus.append(network.physnet + ':' + network.mtu|string) %}
    {%- endif %}
{%- endfor %}
        plugins:
          ml2_conf:
            ml2_type_flat:
              flat_networks: {{ ','.join(networks.flat) }}
              {%- if physnet_mtus %}
            ml2:
              physical_network_mtus: {{ physnet_mtus }}
              {%- endif %}
          openvswitch_agent:
            agent:
              tunnel_types: vxlan
            ovs:
              bridge_mappings: {{ ','.join(bridge_mappings) }}
          linuxbridge_agent:
            linux_bridge:
              bridge_mappings: {{ ','.join(bridge_mappings) }}
        auto_bridge_add:
{%- for network in spec.features.neutron.external_networks %}
          {{ network.bridge }}: {{ network.interface }}
{%- endfor %}
