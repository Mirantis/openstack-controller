{%- set service = 'cinder' %}
{%- set messaging = spec.get('features', {}).get('messaging', {}) %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}

apiVersion: lcm.mirantis.com/v1alpha1
kind: HelmBundle
metadata:
  name: openstack-block-storage
spec:
  releases:
{%- if messaging.get('dedicated_rabbitmq', {}).get('enabled', True) %}
  - name: openstack-cinder-rabbitmq
    chart: {{spec.common.infra.repo}}/rabbitmq
    values:
  {%- if stacklight_enabled %}
      monitoring:
        prometheus:
          enabled: true
  {%- endif %}
      pod:
        replicas:
          server: 1
      manifests:
        network_policy: false
        job_users_create: true
      volume:
        enabled: false
      endpoints:
        cluster_domain_suffix: {{ spec.domain_name }}
        oslo_messaging: &cinder_endpoints_oslo_messaging
          auth:
            admin:
              username: {{ admin_creds.messaging.username }}
              password: {{ admin_creds.messaging.password }}
            cinder:
              username: {{ credentials.messaging.user.username }}
              password: {{ credentials.messaging.user.password }}
          statefulset:
            replicas: 1
            name: openstack-cinder-rabbitmq-rabbitmq
          hosts:
            default: rabbitmq-cinder
          path: /cinder
        prometheus_rabbitmq_exporter:
          hosts:
            default: rabbitmq-exporter-cinder
      conf:
        users:
          cinder:
            auth:
              service_user:
                username: {{ credentials.messaging.user.username }}
                password: {{ credentials.messaging.user.password }}
            path: /cinder
        aux_conf:
          policies:
          - vhost: cinder
            name: default-policy
            pattern: '^(?!amq\.).*'
            definition:
              message-ttl: 120000
          - vhost: cinder
            name: results_expire
            pattern: '^results\.'
            definition:
              expires: 3600000
            priority: 1
          - vhost: cinder
            name: tasks_expire
            pattern: '^tasks\.'
            definition:
              expires: 3600000
            priority: 1
{%- endif %}
  - name: openstack-cinder
    chart: {{spec.common.openstack.repo}}/cinder
    values:
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
      pod:
        replicas:
          api: 1
          registry: 1
      storage: ceph
      ceph_client:
        configmap: rook-ceph-config
        user_secret_name: rook-ceph-admin-keyring
      conf:
        ceph:
          pools:
            backup:
              replication: 1
              crush_rule: replicated_ruleset
              chunk_size: 8
            cinder.volumes:
              replication: 1
              crush_rule: replicated_ruleset
              chunk_size: 8
        cinder:
{%- if spec.get('features', {}).get('cinder', {}).get('backup', {}).get('backend') == 'ceph' %}
          DEFAULT:
            backup_driver: cinder.backup.drivers.ceph.CephBackupDriver
{%- endif %}
          oslo_messaging_notifications:
            topics: {{ notification_topics|join(',') }}
        logging:
          logger_cinder:
            level: {{ spec.get('features', {}).get('logging', {}).get('cinder', {}).get('level', 'INFO') }}
      manifests:
        network_policy: false
        job_rabbit_init: false
{%- if spec.get('features', {}).get('ssl', {}).get('public_endpoints', {}).get('enabled', True) %}
        secret_ca_bundle: true
{%- endif %}
      endpoints:
        cluster_domain_suffix: {{ spec.domain_name }}
{% include 'base/_admin_identity.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            cinder:
              username: {{ credentials.database.user.username }}
              password: {{ credentials.database.user.password }}
{%- if messaging.get('dedicated_rabbitmq', {}).get('enabled', True) %}
        oslo_messaging:
          <<: *cinder_endpoints_oslo_messaging
{%- endif %}
{% include 'base/_notifications.yaml' %}
{%- if spec.get('features', {}).get('ssl', {}).get('public_endpoints', {}).get('enabled', True) %}
        volume:
          host_fqdn_override:
            public:
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          hosts:
            admin:
              host: cinder-api
            default: cinder
            internal: cinder-api
            public:
              host: cinder
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          port:
            api:
              admin: 8776
              default: 80
              internal: 8776
              public: 443
          scheme:
            default: http
            public: https
        volumev2:
          host_fqdn_override:
            public:
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          hosts:
            admin:
              host: cinder-api
            default: cinder
            internal: cinder-api
            public:
              host: cinder
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          port:
            api:
              admin: 8776
              default: 80
              internal: 8776
              public: 443
          scheme:
            default: http
            public: https
        volumev3:
          host_fqdn_override:
            public:
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          hosts:
            admin:
              host: cinder-api
            default: cinder
            internal: cinder-api
            public:
              host: cinder
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, indentfirst=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, indentfirst=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, indentfirst=True) }}
          port:
            api:
              admin: 8776
              default: 80
              internal: 8776
              public: 443
          scheme:
            default: http
            public: https
{%- endif %}
